#include <Servo.h> //Loading Servo.h

//Radar sensor
int trigPin = A0; //TrigPin is pin 13
int echoPin = A1; //Assign echoPin to pin 11
int delayTime = 160; //A delay to allow the servo to move between the 3 locations (Left,Middle and Right)

float distanceFront; //Distance from the front of the sensor
float distanceLeft;  //Distance from the left of the sensor
float distanceRight; //Distance from the right of the sensor

float forwardsDelay;  //The delay that the motors will be on when moving forwards
float forwardsDelayLeft;  //This will be used to work out the distance, the Left sensor measurement will be after moving forward with the forwardsDelay
float forwardsDelayRight; //This will be used to work out the distance, the Right sensor measurement will be after moving forward with the forwardsDelay

//Radar sensor
float pingTime;  //Declare a variable for future calculations
float targetDistanceFront; //Distance to target in mm
float targetDistanceLeft;  //Target distance for the left
float targetDistanceRight; //Target distance from the right
float speedOfSound = 343260; //Speed of sound in mm or 343 in meter's
float maxDistance = 180;     //The maximum Distance to avoid driving into objects

//MOTORS
// Pins for motor A
int enablePinRightMotor = 13;
int directionPin1RightMotor = 12;
int directionPin2RightMotor = 11;
// Pins for motor B
int enablePinLeftMotor = 5;
int directionPin1LeftMotor = 7;
int directionPin2LeftMotor = 6;

//Servo
Servo myServo;         //assigns myServo as a Servo under the <Servo.h>
int pos;               //Assign pos as a writeable variable holding nothing
int servoPin = 2;      //Assign ServoPin to pin 2

//Other variables
float ping;

//**Code that I copied as it's my first time using motors
class Motor {

    int enablePin;
    int directionPin1;
    int directionPin2;

  public:

    //Method to define the motor pins
    Motor(int ENPin, int dPin1, int dPin2) {
      enablePin = ENPin;
      directionPin1 = dPin1;
      directionPin2 = dPin2;
    };

    //Method to drive the motor 0~255 driving forward. -1~-255 driving backward
    void Drive(int speed) {
      if (speed >= 0) {
        digitalWrite(directionPin1, LOW);
        digitalWrite(directionPin2, HIGH);
      }
      else {
        digitalWrite(directionPin1, HIGH);
        digitalWrite(directionPin2, LOW);
        speed = - speed;
      }
      analogWrite(enablePin, speed);
    }
};

Motor rightMotor = Motor(enablePinRightMotor, directionPin1RightMotor, directionPin2RightMotor);
Motor leftMotor = Motor(enablePinLeftMotor, directionPin1LeftMotor, directionPin2LeftMotor);

void motorInitiation() {
  pinMode(enablePinRightMotor, OUTPUT);
  pinMode(directionPin1RightMotor, OUTPUT);
  pinMode(directionPin2RightMotor, OUTPUT);
  pinMode(enablePinLeftMotor, OUTPUT);
  pinMode(directionPin1LeftMotor, OUTPUT);
  pinMode(directionPin2LeftMotor, OUTPUT);
  // Set initial direction and speed
  digitalWrite(enablePinRightMotor, LOW);
  digitalWrite(enablePinLeftMotor, LOW);
  digitalWrite(directionPin1RightMotor, LOW);
  digitalWrite(directionPin2RightMotor, HIGH);
  digitalWrite(directionPin1LeftMotor, LOW);
  digitalWrite(directionPin2LeftMotor, HIGH);
} //** End of copied code


//Function used to get distance reading, it's my first time using this function
void getDistance() {
  //Move Servo to first position and check distance
  pos = 180;  //Set pos to 180
  myServo.write(pos);          //Move Servo to Pos
  delay(delayTime);            //Delay to allow Servo to move

  MotorMeasurement();

  //Turn on and off sensor to get a reading
  ping = calucatePing();

  targetDistanceLeft = calcDistance(ping);

  Serial.print("The left distance is: ");       //Checking read distance
  Serial.println(targetDistanceLeft);

  //Move Servo to second position and check distance
  pos = 88;
  myServo.write(pos);
  delay(delayTime);
  //Turn on and off Sensor to get a reading
  MotorMeasurement();

  ping = calucatePing();

  targetDistanceFront = calcDistance(ping);

  Serial.print("The front distance is: ");
  Serial.println(targetDistanceFront);

  //Move Servo to third position and check distance
  pos = 0;
  myServo.write(pos);
  delay(delayTime);

  MotorMeasurement();

  //Turn on and off sensor to get a reading
  ping = calucatePing();

  targetDistanceRight = calcDistance(ping);

  Serial.print("The right distance is: ");
  Serial.println(targetDistanceRight);

  //Move servo back to centre position as so that it can easily move to first poisiton again
  pos = 88;
  myServo.write(pos);
  delay(50); //Small delay to start the movement of the servo



}

void setup() {
  Serial.begin(9600);
  myServo.attach(servoPin);
  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);

  getDistance();
}

void loop() {
  //
  //
  //
  //This is driveForwards

  if (targetDistanceFront >= maxDistance & targetDistanceLeft >= maxDistance & targetDistanceRight >= maxDistance) {

    //Forwards measurement
    forwardsDelay = targetDistanceFront - maxDistance;    //(Turns target distance into milliseconds)-(turns max distance into milliseconds) is as safetyback up
    distanceFront = (forwardsDelay / 1000) * 400;                               //distanceFront is used to measure the distance that the car will travelled.

    //Left measurement
    forwardsDelayLeft = (2.5 * targetDistanceLeft) - (maxDistance * 2.5); //(Turns taget distance into milliseconds)-(turns max distance into milliseconds) is as safetyback up
    distanceLeft = (forwardsDelayLeft / 1000) * 400; //distanceLeft is used to measure the distance that the car will travelled.

    //Right measurement
    forwardsDelayRight = targetDistanceRight - maxDistance //(Turns taget distance into milliseconds)-(turns max distance into milliseconds) is as safetyback up
    distanceRight = (forwardsDelayRight / 1000) * 400;                             //distanceLeft is used to measure the distance that the car will travelled.

    if(distanceLeft<distanceFront&distanceLeft<distanceRight&distanceLeft>maxDistance){
      forwardsDelay=forwardsDelayLeft;
    }

    if (distanceRight<distanceFront&distanceRight<distanceLeft&distanceLeft>maxDistance){
      forwardsDelay=forwardsDelayRight;
    }

    if (forwardsDelay>1000){
      forwardsDelay=1000;
    }

    if (forwardsDelay>180){
      forwardsDelay=(forwardsDelay-125);
    }

    leftMotor.Drive(255); //Turns left motor on to drive forwards
    rightMotor.Drive(255); //turns right motor on to drive forwards

    Serial.print("the forwrdsDelay is: "); //Printing the forwardsDelay to see how long the time the motor will be on
    Serial.println(forwardsDelay);
    Serial.println("");
    delay(forwardsDelay); //The delay that the motor will be on depending on the above measurements
    leftMotor.Drive(0);   //Turn the motor off
    rightMotor.Drive(0);  //Turn the motor off

    getDistance();        //Grab new distance reading start again.
  }



  //This is drive left if front reading is to close and left is distance is >then the right distance

  if (targetDistanceFront <= maxDistance & targetDistanceRight <= targetDistanceLeft) {

    leftMotor.Drive(-255); //Turns the left motor on reverse
    rightMotor.Drive(255); //Turn the right motor on forwards
    delay(300);            //Delay is enough to turn 90 degrees
    leftMotor.Drive(0);    //Turn off Left motor
    rightMotor.Drive(0);   //Turn off right motor

    getDistance();         //Grab new distance reading to start again
  }



  //This is drive left if front reading to close and right is distance is > then the left distance
  if (targetDistanceFront <= maxDistance & targetDistanceLeft <= targetDistanceRight) {

    leftMotor.Drive(255);   //Turn the left motor on forwards
    rightMotor.Drive(-255); //Turns the right motor on reverse
    delay(300);             //Delay is enough to turn 90 degrees
    leftMotor.Drive(0);     //Turn off Left motor
    rightMotor.Drive(0);    //Turn off right motor

    getDistance();          //Grab new distacne reading to start again
  }



  //This is driveBetweenGaps
  if (targetDistanceFront >= maxDistance && targetDistanceLeft >= 80 && targetDistanceRight >= 80) {
    //Forwards measurement
    forwardsDelay = (2.5 * targetDistanceFront) - (80 * 2.5);    //(Turns taget distance into milliseconds)-(turns max distance into milliseconds) is as safetyback up
    distanceFront = (forwardsDelay / 1000) * 400;                               //distanceFront is used to measure the distance that the car will travelled.

    //Left measurement
    forwardsDelayLeft = (2.5 * targetDistanceLeft) - (80 * 2.5); //(Turns taget distance into milliseconds)-(turns max distance into milliseconds) is as safetyback up
    distanceLeft = (forwardsDelayLeft / 1000) * 400; //distanceLeft is used to measure the distance that the car will travelled.

    //Right mreasurement
    forwardsDelayRight = (2.5 * targetDistanceRight) - (80 * 2.5); //(Turns taget distance into milliseconds)-(turns max distance into milliseconds) is as safetyback up
    distanceRight = (forwardsDelayRight / 1000) * 400;                             //distanceLeft is used to measure the distance that the car will travelled.

    if(distanceLeft<distanceFront&distanceLeft<distanceRight&distanceLeft>maxDistance){
      forwardsDelay=forwardsDelayLeft;
    }

    if (distanceRight<distanceFront&distanceRight<distanceLeft&distanceLeft>maxDistance){
      forwardsDelay=forwardsDelayRight;
    }

    if (forwardsDelay>500){
      forwardsDelay=500;
    }

    if (forwardsDelay>180){
      forwardsDelay=(forwardsDelay-62);
    }
    leftMotor.Drive(255);     //Turn the left motor on forwards
    rightMotor.Drive(255);    //Turn the right motor on forwards
    delay(forwardsDelay);               //Slowly move through gap
    leftMotor.Drive(0);       //Turn off Left motor
    rightMotor.Drive(0);      //Turn off right motor

    getDistance();            //Grab new distance reading to start again
  }



  //Turn left is front is blocked and left is greater then right
  if (targetDistanceFront <= maxDistance & targetDistanceLeft >= targetDistanceRight) {

    leftMotor.Drive(-255);    //Turns the left motor on reverse
    rightMotor.Drive(255);    //Turn right motor forwards
    delay(350);
    leftMotor.Drive(0);       //Turn off Left motor
    rightMotor.Drive(0);      //Turn off right motor

    getDistance();            //Grab new distance reading to start again
  }



  //Turn left is something blocking left
  if (targetDistanceRight <= maxDistance) {

    leftMotor.Drive(-255);    //Turns the left motor on reverse
    rightMotor.Drive(255);    //Turn right motor forwards
    delay(150);
    leftMotor.Drive(0);       //Turn off Left motor
    rightMotor.Drive(0);      //Turn off right motor

    getDistance();            //Grab new distance reading to start again

  }



  //Turn right if front is blocked and right is greater then left
  if (targetDistanceFront <= maxDistance & targetDistanceRight >= targetDistanceLeft) {

    leftMotor.Drive(255);     //Turn left motor forwards
    rightMotor.Drive(-255);   //Turns the right motor on reverse
    delay(300);
    leftMotor.Drive(0);       //Turn off Left motor
    rightMotor.Drive(0);      //Turn off Left motor

    getDistance();            //Grab new distance reading to start again

  }



  //Turn right
  if (targetDistanceLeft <= maxDistance) {

    leftMotor.Drive(255);       //Turn left motor forwards
    rightMotor.Drive(-255);     //Turns the right motor on reverse
    delay(150);
    leftMotor.Drive(0);         //Turn off Left motor
    rightMotor.Drive(0);        //Turn off Left motor

    getDistance();              //Grab new distance reading to start again
  }

}


float calculatePing() {
  pingTime = pulseIn(echoPin, HIGH);             //measure pingTime
  pingTime = pingTime / 1000000.;                //converts microSeconds to seconds
  return pingTime;
}


void MotorMeasurement() {
  digitalWrite(trigPin, LOW); //set the trigPin to low
  delayMicroseconds(2000);    // pause in Microseconds
  digitalWrite(trigPin, HIGH);// set trigPin to HIGH
  delayMicroseconds(15);      // pause for 15 microseconds
  digitalWrite(trigPin, LOW); // return trigpin to low
  delayMicroseconds(15);      // delay again.
}


float calcDistance (float ping) {
  targetDistance = speedOfSound * ping; //Measure distance traveled in seconds.
  targetDistance = targetDistance / 2;  //Divides distance by 2 because the sound travels forwards and backwards before giving a signal
  return targetDistance;
}
